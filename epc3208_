#!/usr/bin/env python
# plugin for monitoring a EPC3208 cable modem
# by parsing their (publicly available) status page
# on the standard ip address 192.168.100.1
#
# To use, just link to this file like this:
# ln -s /path/to/epc3208_ /etc/munin/plugins/epc3208_pwr
# ln -s /path/to/epc3208_ /etc/munin/plugins/epc3208_snr
# for monitoring channel power and signal to noise ratio
#
# Note that this script uses "Beautiful Soup" so make sure
# you have the library installed. On ubuntu/debian systems
# this could probably be done by executing
# sudo apt-get install python-bs4
# 
# Also, I am not a pro neither with python nor with linux
# I hacked this script together on a lone saturday night
#
# Author: Simon Kueppers <simon.kueppers@skueppers.de>
# v1.0 26/09/2014 - First draft
#
# No special license on this plugin. Just pass me a beer
# in case we meet 

from bs4 import BeautifulSoup
import sys, os, string
import urllib2
import re

# Some global definitions
url = "http://192.168.100.1/Docsis_system.asp"
regex = re.compile(r'(dw\(vs_channel\);\s*(?P<id>[0-9]+)dw\(vcolon\);)|(\s*(?P<pwr>-?[0-9.]+)\s*dw\(vdbmv\))|(\s*(?P<snr>[0-9.]+)\s*dw\(vdb\))')
plugin_name = list(os.path.split(sys.argv[0]))[1]
type = plugin_name[string.index(plugin_name,'_')+1:]
plugin_version = "EPC3208 v1.0"

plugin_defs = {
    'pwr': {
        'graph_title': 'MODEM Downstream Power', 
        'graph_info': 'This graph shows the signal power per channel', 
        'graph_vlabel': 'dBmV',
        'graph_category': 'EPC3208',
    }, 'snr': {
        'graph_title': 'MODEM Downstream SNR', 
        'graph_info': 'This graph shows the signal to noise ratio per channel', 
        'graph_vlabel': 'dB',
        'graph_category': 'EPC3208',
    }
}

graph_defs = {
    'pwr': { 
        'type': 'GAUGE',
        'warning': '-15:15', 
        'critical': '-20:20' 
    }, 'snr': { 
        'type': 'GAUGE',
        'warning': '25:', 
        'critical': '20:' 
    },
}

# Callback for BeautifulSoup to find appropriate tags
def soup_channel_callback(tag):
    return tag.name == "td" and regex.match(tag.text)

# Retrievs the channel values as an array of dictionaries
def get_channel_data(url):
    channels = []

    html = urllib2.urlopen(url)
    soup = BeautifulSoup(html)
    
    for tag in soup.find_all(soup_channel_callback):
        m = regex.match(tag.text)
        data = m.groupdict()

        if (data['id'] != None):
            # First entry, contains channel id
            # Create new dictionary and add id 
            values = {}
            values['id'] = data['id']

        elif (data['pwr'] != None):
            # This cell contains power
            # Add power reading to current dictionary
            values['pwr'] = data['pwr']

        elif (data['snr'] != None):
            # This cell contains snr
            # Add SNR reading to current dictionary and append to array
            values['snr'] = data['snr']
            channels.append(values)

    return channels

# The real business happens here
# Check what munin wants from us and answer accordingly
if len(sys.argv) > 1:
    if sys.argv[1] == "autoconf" :
        print('yes')
        sys.exit(0)
    elif sys.argv[1] == "config" :
        for key in plugin_defs[type]:
            print('{} {}'.format(key, plugin_defs[type][key]))

        for channel in get_channel_data(url):
            print('channel{}.label Channel {}'.format(channel['id'], channel['id']))
            for key in graph_defs[type]:
                print('channel{}.{} {}'.format(channel['id'], key, graph_defs[type][key]))
        
        sys.exit(0)
    elif sys.argv[1] == "suggest" :
        for key in plugin_defs:
            print(key)
        sys.exit(0)
    elif sys.argv[1] == "version" :
        print(plugin_version)
        sys.exit(0)
    else:
        #Unknown argument
        sys.exit(1)

else:
    # No argument given, retrieve and output the values
    for channel in get_channel_data(url):
        print('channel{}.value {}'.format(channel['id'], channel[type]))

    sys.exit(0)
